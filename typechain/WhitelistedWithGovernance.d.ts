/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface WhitelistedWithGovernanceInterface extends ethers.utils.Interface {
  functions: {
    "commitWhitelist()": FunctionFragment;
    "getWhitelist()": FunctionFragment;
    "governor()": FunctionFragment;
    "proposalTime()": FunctionFragment;
    "proposeWhitelist(address[])": FunctionFragment;
    "proposedWhitelist(uint256)": FunctionFragment;
    "setGovernor(address)": FunctionFragment;
    "timeLockInterval()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "commitWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "governor", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposalTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposeWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedWhitelist",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setGovernor", values: [string]): string;
  encodeFunctionData(
    functionFragment: "timeLockInterval",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "commitWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "governor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposalTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposeWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGovernor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timeLockInterval",
    data: BytesLike
  ): Result;

  events: {
    "Committed(address[])": EventFragment;
    "GovernorSet(address)": EventFragment;
    "Proposed(address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Committed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GovernorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Proposed"): EventFragment;
}

export class WhitelistedWithGovernance extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: WhitelistedWithGovernanceInterface;

  functions: {
    commitWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getWhitelist(overrides?: CallOverrides): Promise<[string[]]>;

    governor(overrides?: CallOverrides): Promise<[string]>;

    proposalTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposeWhitelist(
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    proposedWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timeLockInterval(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  commitWhitelist(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getWhitelist(overrides?: CallOverrides): Promise<string[]>;

  governor(overrides?: CallOverrides): Promise<string>;

  proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

  proposeWhitelist(
    _whitelist: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  proposedWhitelist(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  setGovernor(
    _governor: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timeLockInterval(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    commitWhitelist(overrides?: CallOverrides): Promise<void>;

    getWhitelist(overrides?: CallOverrides): Promise<string[]>;

    governor(overrides?: CallOverrides): Promise<string>;

    proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposeWhitelist(
      _whitelist: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    proposedWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    setGovernor(_governor: string, overrides?: CallOverrides): Promise<void>;

    timeLockInterval(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    Committed(
      whitelist?: null
    ): TypedEventFilter<[string[]], { whitelist: string[] }>;

    GovernorSet(
      governor?: null
    ): TypedEventFilter<[string], { governor: string }>;

    Proposed(
      whitelist?: null
    ): TypedEventFilter<[string[]], { whitelist: string[] }>;
  };

  estimateGas: {
    commitWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    governor(overrides?: CallOverrides): Promise<BigNumber>;

    proposalTime(overrides?: CallOverrides): Promise<BigNumber>;

    proposeWhitelist(
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    proposedWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timeLockInterval(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    commitWhitelist(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    governor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposalTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeWhitelist(
      _whitelist: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposedWhitelist(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setGovernor(
      _governor: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timeLockInterval(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
